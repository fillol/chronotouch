#!/bin/bash

DRY_RUN=false
VERBOSE=false
INTERACTIVE=false

verbose_log() {
    if [[ "$VERBOSE" == true ]]; then
        echo "VERBOSE: $@"
    fi
}

convert_whatsapp_counter_to_time() {
    local counter_str="$1"
    local counter=$((10#$counter_str))
    local hours minutes
    hours=$(printf "%02d" $((counter / 60)))
    minutes=$(printf "%02d" $((counter % 60)))
    echo "${hours}${minutes}"
}

extract_date_from_filename() {
    local filename="$1"
    local extracted_date_filename=""

    verbose_log "Entering extract_date_from_filename() for file: '$filename'"

    if [[ "$filename" =~ ^Screenshot_([0-9]{4})([0-9]{2})([0-9]{2})-([0-9]{2})([0-9]{2})([0-9]{2}) ]]; then
        extracted_date_filename="${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[3]}${BASH_REMATCH[4]}${BASH_REMATCH[5]}"
        verbose_log "Pattern 'Screenshot_YYYYMMDD-hhmmss' matched. Candidate: $extracted_date_filename"
    elif [[ "$filename" =~ ^IMG([_-]?)([0-9]{8})([_-]?)WA([0-9]+) ]]; then
        local counter="${BASH_REMATCH[4]}"
        local time=$(convert_whatsapp_counter_to_time "$counter")
        extracted_date_filename="${BASH_REMATCH[2]}${time}"
        verbose_log "Pattern 'IMG-YYYYMMDD-WAcounter' matched. Candidate: $extracted_date_filename"
    elif [[ "$filename" =~ ^IMG([_-]?)([0-9]{8})_([0-9]{6}) ]]; then
        extracted_date_filename="${BASH_REMATCH[2]}${BASH_REMATCH[3]:0:4}"
        verbose_log "Pattern 'IMG_YYYYMMDD_hhmmss' matched. Candidate: $extracted_date_filename"
    elif [[ "$filename" =~ ^PXL_([0-9]{8})_([0-9]{6}) ]]; then
        extracted_date_filename="${BASH_REMATCH[1]}${BASH_REMATCH[2]:0:4}"
        verbose_log "Pattern 'PXL_YYYYMMDD_hhmmss' matched. Candidate: $extracted_date_filename"
    elif [[ "$filename" =~ ^IMG([_-]?)([0-9]{8})([_-]?)([0-9]{4}) ]]; then
        extracted_date_filename="${BASH_REMATCH[2]}${BASH_REMATCH[4]}"
        verbose_log "Pattern 'IMG-YYYYMMDD-HHMM' matched. Candidate: $extracted_date_filename"
    elif [[ "$filename" =~ ^VID([_-]?)([0-9]{8})([_-]?)([0-9]{4}) ]]; then
        extracted_date_filename="${BASH_REMATCH[2]}${BASH_REMATCH[4]}"
        verbose_log "Pattern 'VID-YYYYMMDD-HHMM' matched. Candidate: $extracted_date_filename"
    elif [[ "$filename" =~ ^PANO([_-]?)([0-9]{8})([_-]?)([0-9]{4}) ]]; then
        extracted_date_filename="${BASH_REMATCH[2]}${BASH_REMATCH[4]}"
        verbose_log "Pattern 'PANO-YYYYMMDD-HHMM' matched. Candidate: $extracted_date_filename"
    elif [[ "$filename" =~ ^Screenshot([_-]?)([0-9]{8})([_-]?)([0-9]{6}) && ! "$filename" =~ ^Screenshot_([0-9]{4})([0-9]{2})([0-9]{2})-([0-9]{2})([0-9]{2})([0-9]{2}) ]]; then
        extracted_date_filename="${BASH_REMATCH[2]}${BASH_REMATCH[4]:0:4}"
        verbose_log "Pattern 'Screenshot-YYYYMMDD-hhmmss' (generico) matched. Candidate: $extracted_date_filename"
    elif [[ "$filename" =~ ^Schermata([_-]?)([0-9]{8})([_-]?)([0-9]{6}) ]]; then
        extracted_date_filename="${BASH_REMATCH[2]}${BASH_REMATCH[4]:0:4}"
        verbose_log "Pattern 'Schermata-YYYYMMDD-hhmmss' matched. Candidate: $extracted_date_filename"
    elif [[ "$filename" =~ ^([0-9]{8})_([0-9]{6}) ]]; then
        extracted_date_filename="${BASH_REMATCH[1]}${BASH_REMATCH[2]:0:4}"
        verbose_log "Pattern 'YYYYMMDD_hhmmss' matched. Candidate: $extracted_date_filename"
    fi

    if [[ -n "$extracted_date_filename" ]]; then
        if [[ ${#extracted_date_filename} -eq 12 ]] && [[ "$extracted_date_filename" =~ ^[0-9]+$ ]]; then
            echo "$extracted_date_filename"
            verbose_log "Date '$extracted_date_filename' is valid. Exiting with success."
            return 0
        else
            verbose_log "Date '$extracted_date_filename' is invalid (length ${#extracted_date_filename} or not numeric)."
        fi
    fi
    verbose_log "No filename pattern matched or invalid date. Exiting with failure."
    return 1
}

extract_date_from_exif() {
    local filename="$1"
    verbose_log "Entering extract_date_from_exif() for file: '$filename'"

    if ! command -v exiftool &> /dev/null; then
        verbose_log "exiftool not found. Exiting."
        return 1
    fi

    local extracted_date_exif
    for tag in "CreateDate" "DateTimeOriginal" "ModifyDate"; do
        verbose_log "Trying EXIF tag: $tag"
        extracted_date_exif=$(exiftool -q -q -d '%Y%m%d%H%M' "-${tag}" -S -n "$filename" 2>/dev/null)
        if [[ -n "$extracted_date_exif" ]] && [[ "$extracted_date_exif" =~ ^[0-9]{12}$ ]]; then
            echo "$extracted_date_exif"
            verbose_log "EXIF $tag '$extracted_date_exif' extracted. Exiting with success."
            return 0
        else
            verbose_log "EXIF $tag failed or invalid (Raw: '$extracted_date_exif')."
        fi
    done
    
    verbose_log "All attempted EXIF tags failed. Exiting with failure."
    return 1
}

declare -a SCRIPT_OPTS_RECURSIVE=()
FOLDER_ARG=""
INITIAL_CALL=true

while [[ $# -gt 0 ]]; do
    case "$1" in
        -n|--dry-run) DRY_RUN=true; SCRIPT_OPTS_RECURSIVE+=("-n"); shift ;;
        -v|--verbose) VERBOSE=true; SCRIPT_OPTS_RECURSIVE+=("-v"); shift ;;
        -i|--interactive) INTERACTIVE=true; SCRIPT_OPTS_RECURSIVE+=("-i"); shift ;;
        --help|-h)
            echo "Usage: $0 [-n|--dry-run] [-v|--verbose] [-i|--interactive] [folder]"
            echo "  Processes files in the current folder or the specified [folder]."
            echo "  Options:"
            echo "    -n, --dry-run     Simulation mode, no changes made."
            echo "    -v, --verbose     Enable verbose output."
            echo "    -i, --interactive  Prompt before each change."
            echo "    -h, --help        Show this help message."
            exit 0
            ;;
        *)
            if [[ -z "$FOLDER_ARG" ]]; then FOLDER_ARG="$1"; else
                echo "Error: Too many folder arguments." >&2; exit 1;
            fi; shift ;;
    esac
done

TARGET_FOLDER="."
if [[ -n "$FOLDER_ARG" ]]; then
    if [[ ! -d "$FOLDER_ARG" ]]; then
        echo "Error: '$FOLDER_ARG' is not a valid folder." >&2; exit 1
    fi
    TARGET_FOLDER="$FOLDER_ARG"
else
    echo "Processing files in the current directory: $(pwd)"
    [[ "$DRY_RUN" == true ]] && echo "**WARNING:** DRY-RUN mode. No timestamps will be modified."
    [[ "$VERBOSE" == true ]] && echo "**VERBOSE:** Verbose output enabled."
    [[ "$INTERACTIVE" == true ]] && echo "**INTERACTIVE:** Interactive mode enabled."
    read -r -p "Are you sure? Type YES to confirm: " answer
    if [[ "$answer" != "YES" ]]; then echo "Operation cancelled."; exit 1; fi
fi

if [[ -z "$_IS_RECURSIVE_CALL_MARKER" ]]; then
    export _IS_RECURSIVE_CALL_MARKER="true"
else
    INITIAL_CALL=false
fi

if [[ "$INITIAL_CALL" == true ]] && ! command -v exiftool &> /dev/null && [[ "$VERBOSE" == false ]]; then
    echo "Warning: exiftool not installed. EXIF date extraction may not be available for all files."
    echo "Consider installing libimage-exiftool-perl."
fi

ORIGINAL_PWD=$(pwd)
cd "$TARGET_FOLDER" || { echo "Error: Cannot access folder '$TARGET_FOLDER'"; exit 1; }
verbose_log "Changed directory to $(pwd). Starting processing..."

find . -maxdepth 1 -print0 | while IFS= read -r -d $'\0' item; do
    item_path="${item#./}"
    if [[ -z "$item_path" ]]; then continue; fi

    if [[ -d "$item_path" ]]; then
        verbose_log "Found directory: '$item_path'. Calling script recursively."
        "$0" "${SCRIPT_OPTS_RECURSIVE[@]}" "$item_path"
    elif [[ -f "$item_path" ]]; then
        filename=$(basename "$item_path")
        verbose_log "Processing file: '$filename' (full path: '$item_path')"
        extracted_date=""

        local exif_date
        exif_date=$(extract_date_from_exif "$item_path")
        if [[ $? -eq 0 ]]; then
            extracted_date="$exif_date"
            echo "EXIF date for '$filename': $extracted_date"
        else
            verbose_log "EXIF failed or not applicable for '$filename'. Trying filename parsing."
            local filename_date
            filename_date=$(extract_date_from_filename "$filename")
            if [[ $? -eq 0 ]]; then
                extracted_date="$filename_date"
                echo "Filename date for '$filename': $extracted_date (EXIF failed/not applicable)"
            else
                echo "No date found for '$filename' (EXIF and filename parsing failed)."
                verbose_log "Both EXIF and filename parsing failed for '$filename'."
            fi
        fi

        if [[ -n "$extracted_date" ]]; then
            if [[ ${#extracted_date} -ne 12 ]]; then
                echo "Error: Extracted date '$extracted_date' for '$filename' is invalid format. Skipping." >&2
                verbose_log "Invalid date length ${#extracted_date} for '$extracted_date' for file '$filename'."
                continue
            fi

            local touch_timestamp="$extracted_date"

            if [[ "$DRY_RUN" == false ]]; then
                if [[ "$INTERACTIVE" == true ]]; then
                    local confirm_answer
                    read -r -p "Change timestamp of '$filename' to $touch_timestamp? (y/N) " confirm_answer
                    if [[ ! "$confirm_answer" =~ ^[Yy]$ ]]; then
                        echo "Skipped timestamp change for '$filename'."
                        verbose_log "User skipped '$filename'."
                        continue
                    fi
                fi
                if ! touch -t "$touch_timestamp" "$item_path"; then
                    echo "Error: Failed to change timestamp for '$item_path'." >&2
                else
                    echo "Timestamp for '$item_path' changed to: $touch_timestamp"
                fi
            else
                echo "[SIMULATION] Timestamp for '$item_path' *would be* changed to: $touch_timestamp"
            fi
        fi
    else
        verbose_log "Item '$item_path' is not a file or directory. Skipping."
    fi
done

if [[ "$INITIAL_CALL" == true ]]; then
    final_target_path="$TARGET_FOLDER"
    if ! [[ "$TARGET_FOLDER" == /* ]]; then
        final_target_path="$ORIGINAL_PWD/$TARGET_FOLDER"
    fi
    final_target_path_normalized=$(cd "$final_target_path" && pwd)

    echo "Script processing completed for: $final_target_path_normalized"
    if [[ "$DRY_RUN" == true ]]; then
        echo "**DRY-RUN Mode was active:** No timestamps were actually modified."
    fi
    unset _IS_RECURSIVE_CALL_MARKER
fi
